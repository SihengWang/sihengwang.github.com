{"version":3,"sources":["webpack:///path---index-0db164276ef18f229c34.js","webpack:///./.cache/json/index.json"],"names":["webpackJsonp","365","module","exports","data","site","siteMetadata","title","description","url","author","twitter","adsense","remark","posts","post","html","frontmatter","layout","path","categories","date","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,WAAAC,YAAA,sCAAAC,IAAA,+BAAAC,OAAA,WAAAC,QAAA,WAAAC,QAAA,KAAmKC,QAAWC,QAAUC,MAAQC,KAAA,qlJAAqrDC,aAA0gGC,OAAA,OAAAX,MAAA,WAAAY,KAAA,sBAAAC,YAAA,2BAAAC,KAAA,iBAAiIN,MAAQC,KAAA,whCAAAC,aAAokCC,OAAA,OAAAX,MAAA,mBAAAY,KAAA,qBAAAC,YAAA,YAAAC,KAAA,mBAA0HC","file":"path---index-0db164276ef18f229c34.js","sourcesContent":["webpackJsonp([142629428675168],{\n\n/***/ 365:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Gatstrap\",\"description\":\"Gatsby starter for bootstrap a blog\",\"url\":\"https://gatstrap.netlify.com\",\"author\":\"jaxx2104\",\"twitter\":\"jaxx2104\",\"adsense\":\"\"}},\"remark\":{\"posts\":[{\"post\":{\"html\":\"<h1>Git 特殊技能</h1>\\n<h2>Git 迁移 - 从一个git仓库迁移到另外一个git仓库</h2>\\n<ol>\\n<li>从原地址克隆一份裸版本库，比如原本托管于 GitHub。</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">git clone --bare git://github.com/username/project.git</code></pre>\\n      </div>\\n<p>—bare 创建的克隆版本库都不包含工作区，直接就是版本库的内容，这样的版本库称为裸版本库。</p>\\n<!--more-->\\n<ol start=\\\"2\\\">\\n<li>\\n<p>然后到新的 Git 服务器上创建一个新项目，比如 GitCafe</p>\\n</li>\\n<li>\\n<p>以镜像推送的方式上传代码到 GitCafe 服务器上</p>\\n</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">cd project.git\\ngit push --mirror git@gitcafe.com/username/newproject.git</code></pre>\\n      </div>\\n<p>— mirror 克隆出来的裸版本对上游版本库进行了注册，这样可以在裸版本库中使用git fetch命令和上游版本库进行持续同步。</p>\\n<ol start=\\\"4\\\">\\n<li>删除本地代码</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">cd ..\\nrm -rf project.git</code></pre>\\n      </div>\\n<ol start=\\\"5\\\">\\n<li>到新服务器 GitCafe 上找到 Clone 地址，直接 Clone 到本地就可以了</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">git clone git@gitcafe.com/username/newproject.git</code></pre>\\n      </div>\\n<hr>\\n<h2>Git 把多個 Commit 合併成一個 Commit</h2>\\n<blockquote>\\n<p><a href=\\\"https://gitbook.tw/chapters/rewrite-history/merge-multiple-commits-to-one-commit.html\\\">参考1-把多個 Commit 合併成一個 Commit</a>\\n<a href=\\\"http://blog.codingplayboy.com/2017/12/13/git-commit-operate/\\\">参考2-Git提交历史的修改删除合并等实践</a></p>\\n</blockquote>\\n<p>有時候 Commit 的太過「瑣碎」，舉個例子來說：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">$ git log --oneline\\n27f6ed6 (HEAD -&gt; master) add dog 2\\n2bab3e7 add dog 1\\nca40fc9 add 2 cats\\n1de2076 add cat 2\\ncd82f29 add cat 1\\n382a2a5 add database settings\\nbb0c9c2 init commit</code></pre>\\n      </div>\\n<p>在 <code class=\\\"language-text\\\">cd82f29</code> 跟 <code class=\\\"language-text\\\">1de2076</code> 這兩個 Commit 都只有各加一個檔案（分別是 <code class=\\\"language-text\\\">cat1.html</code> 跟 <code class=\\\"language-text\\\">cat2.html</code>），<code class=\\\"language-text\\\">2bab3e7</code> 跟 <code class=\\\"language-text\\\">27f6ed6</code> 也一樣，都只各加了一個檔案而已。如果想把這幾個 Commit 合併成一個，會讓 Commit 看起來更乾淨一些。同樣可以使用互動模式的 Rebase 來處理：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">$ git rebase -i bb0c9c2</code></pre>\\n      </div>\\n<p>接著一樣再次出現 Vim 編輯器視窗，內容如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">pick 382a2a5 add database settings\\npick cd82f29 add cat 1\\npick 1de2076 add cat 2\\npick ca40fc9 add 2 cats\\npick 2bab3e7 add dog 1\\npick 27f6ed6 add dog 2\\n\\n# Rebase bb0c9c2..27f6ed6 onto bb0c9c2 (6 commands)\\n#\\n# Commands:\\n# ...[略]...</code></pre>\\n      </div>\\n<p>這裡我用的指令是 <code class=\\\"language-text\\\">squash</code>，把上面的內容修改成這樣：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">pick 382a2a5 add database settings\\npick cd82f29 add cat 1\\nsquash 1de2076 add cat 2\\nsquash ca40fc9 add 2 cats\\npick 2bab3e7 add dog 1\\nsquash 27f6ed6 add dog 2</code></pre>\\n      </div>\\n<blockquote>\\n<p>注意！\\n在互動模式的紀錄由上而下是從最舊到最新，跟 git log 指令所呈現的結果是相反的。</p>\\n</blockquote>\\n<p>這樣的修改表示接下來會發生這些事：</p>\\n<ol>\\n<li>最後一行的 27f6ed6 會跟前一個 Commit 2bab3e7 進行合併，也就是 add dog 1 跟 add dog 2 這個 Commit 會合在一起。</li>\\n<li>倒數第三號的 ca40fc9 會跟前一個 Commit 1de2076 合併，但因為 1de2076 又會再往前一個 Commit cd82f29 合併，所以整個跟 cat 有關的這三個 Commit 會併成同一個。  </li>\\n</ol>\\n<p>存檔並離開 Vim 編輯器後，它會開始進行 Rebase，而在 Squash 的過程中，它還會跳出 Vim 編輯器讓你編輯一下訊息：</p>\\n<p><img src=\\\"https://gitbook.tw/images/rewrite-history/merge-multiple-commits-to-one-commit/squash1.png\\\"></p>\\n<p>我把訊息改成「add all cats」：</p>\\n<p><img src=\\\"https://gitbook.tw/images/rewrite-history/merge-multiple-commits-to-one-commit/squash2.png\\\"></p>\\n<p>同樣的，在另一次的 Squash 也會再編輯一次 Commit 訊息，我把它改成「add all dogs」。整個 Rebase 的訊息如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">$ git rebase -i bb0c9c2\\n[detached HEAD fb79104] add all cats\\n Date: Sun Aug 20 05:08:25 2017 +0800\\n 4 files changed, 0 insertions(+), 0 deletions(-)\\n create mode 100644 cat1.html\\n create mode 100644 cat2.html\\n create mode 100644 cat3.html\\n create mode 100644 cat4.html\\n[detached HEAD 803eeac] add all dogs\\n Date: Sun Aug 20 05:09:53 2017 +0800\\n 2 files changed, 0 insertions(+), 0 deletions(-)\\n create mode 100644 dog1.html\\n create mode 100644 dog2.html\\nSuccessfully rebased and updated refs/heads/master.</code></pre>\\n      </div>\\n<p>這時候的歷史紀錄就變成這樣了：</p>\\n<p><img src=\\\"https://gitbook.tw/images/rewrite-history/merge-multiple-commits-to-one-commit/squash3.png\\\"></p>\\n<p>這樣就把剛剛那些貓貓狗狗的，全部整理成兩個 Commit 了。</p>\",\"frontmatter\":{\"layout\":\"post\",\"title\":\"Markdown\",\"path\":\"/git-special-skill/\",\"categories\":[\"Markdown\",\"Movable Type\"],\"date\":\"2018/05/13\"}}},{\"post\":{\"html\":\"<h1>An h1 header</h1>\\n<p>Paragraphs are separated by a blank line.</p>\\n<p>2nd paragraph. <em>Italic</em>, <strong>bold</strong>, and <code class=\\\"language-text\\\">monospace</code>. Itemized lists\\nlook like:</p>\\n<ul>\\n<li>this one</li>\\n<li>that one</li>\\n<li>the other one</li>\\n</ul>\\n<!--more-->\\n<h2>An h2 header</h2>\\n<p>content starts at 4-columns in.</p>\\n<blockquote>\\n<p>Block quotes are\\nwritten like so.</p>\\n<p>They can span multiple paragraphs,\\nif you like.</p>\\n</blockquote>\\n<p>Use 3 dashes for an em-dash. Use 2 dashes for ranges (ex., “it’s all\\nin chapters 12—14”). Three dots … will be converted to an ellipsis.\\nUnicode is supported. ☺</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// javascript</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Hello World!!\\\"</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\",\"frontmatter\":{\"layout\":\"post\",\"title\":\"Markdown Example\",\"path\":\"/markdown-example/\",\"categories\":[\"Markdown\"],\"date\":\"2018/05/12\"}}}]}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---index-0db164276ef18f229c34.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Gatstrap\",\"description\":\"Gatsby starter for bootstrap a blog\",\"url\":\"https://gatstrap.netlify.com\",\"author\":\"jaxx2104\",\"twitter\":\"jaxx2104\",\"adsense\":\"\"}},\"remark\":{\"posts\":[{\"post\":{\"html\":\"<h1>Git 特殊技能</h1>\\n<h2>Git 迁移 - 从一个git仓库迁移到另外一个git仓库</h2>\\n<ol>\\n<li>从原地址克隆一份裸版本库，比如原本托管于 GitHub。</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">git clone --bare git://github.com/username/project.git</code></pre>\\n      </div>\\n<p>—bare 创建的克隆版本库都不包含工作区，直接就是版本库的内容，这样的版本库称为裸版本库。</p>\\n<!--more-->\\n<ol start=\\\"2\\\">\\n<li>\\n<p>然后到新的 Git 服务器上创建一个新项目，比如 GitCafe</p>\\n</li>\\n<li>\\n<p>以镜像推送的方式上传代码到 GitCafe 服务器上</p>\\n</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">cd project.git\\ngit push --mirror git@gitcafe.com/username/newproject.git</code></pre>\\n      </div>\\n<p>— mirror 克隆出来的裸版本对上游版本库进行了注册，这样可以在裸版本库中使用git fetch命令和上游版本库进行持续同步。</p>\\n<ol start=\\\"4\\\">\\n<li>删除本地代码</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">cd ..\\nrm -rf project.git</code></pre>\\n      </div>\\n<ol start=\\\"5\\\">\\n<li>到新服务器 GitCafe 上找到 Clone 地址，直接 Clone 到本地就可以了</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">git clone git@gitcafe.com/username/newproject.git</code></pre>\\n      </div>\\n<hr>\\n<h2>Git 把多個 Commit 合併成一個 Commit</h2>\\n<blockquote>\\n<p><a href=\\\"https://gitbook.tw/chapters/rewrite-history/merge-multiple-commits-to-one-commit.html\\\">参考1-把多個 Commit 合併成一個 Commit</a>\\n<a href=\\\"http://blog.codingplayboy.com/2017/12/13/git-commit-operate/\\\">参考2-Git提交历史的修改删除合并等实践</a></p>\\n</blockquote>\\n<p>有時候 Commit 的太過「瑣碎」，舉個例子來說：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">$ git log --oneline\\n27f6ed6 (HEAD -&gt; master) add dog 2\\n2bab3e7 add dog 1\\nca40fc9 add 2 cats\\n1de2076 add cat 2\\ncd82f29 add cat 1\\n382a2a5 add database settings\\nbb0c9c2 init commit</code></pre>\\n      </div>\\n<p>在 <code class=\\\"language-text\\\">cd82f29</code> 跟 <code class=\\\"language-text\\\">1de2076</code> 這兩個 Commit 都只有各加一個檔案（分別是 <code class=\\\"language-text\\\">cat1.html</code> 跟 <code class=\\\"language-text\\\">cat2.html</code>），<code class=\\\"language-text\\\">2bab3e7</code> 跟 <code class=\\\"language-text\\\">27f6ed6</code> 也一樣，都只各加了一個檔案而已。如果想把這幾個 Commit 合併成一個，會讓 Commit 看起來更乾淨一些。同樣可以使用互動模式的 Rebase 來處理：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">$ git rebase -i bb0c9c2</code></pre>\\n      </div>\\n<p>接著一樣再次出現 Vim 編輯器視窗，內容如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">pick 382a2a5 add database settings\\npick cd82f29 add cat 1\\npick 1de2076 add cat 2\\npick ca40fc9 add 2 cats\\npick 2bab3e7 add dog 1\\npick 27f6ed6 add dog 2\\n\\n# Rebase bb0c9c2..27f6ed6 onto bb0c9c2 (6 commands)\\n#\\n# Commands:\\n# ...[略]...</code></pre>\\n      </div>\\n<p>這裡我用的指令是 <code class=\\\"language-text\\\">squash</code>，把上面的內容修改成這樣：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">pick 382a2a5 add database settings\\npick cd82f29 add cat 1\\nsquash 1de2076 add cat 2\\nsquash ca40fc9 add 2 cats\\npick 2bab3e7 add dog 1\\nsquash 27f6ed6 add dog 2</code></pre>\\n      </div>\\n<blockquote>\\n<p>注意！\\n在互動模式的紀錄由上而下是從最舊到最新，跟 git log 指令所呈現的結果是相反的。</p>\\n</blockquote>\\n<p>這樣的修改表示接下來會發生這些事：</p>\\n<ol>\\n<li>最後一行的 27f6ed6 會跟前一個 Commit 2bab3e7 進行合併，也就是 add dog 1 跟 add dog 2 這個 Commit 會合在一起。</li>\\n<li>倒數第三號的 ca40fc9 會跟前一個 Commit 1de2076 合併，但因為 1de2076 又會再往前一個 Commit cd82f29 合併，所以整個跟 cat 有關的這三個 Commit 會併成同一個。  </li>\\n</ol>\\n<p>存檔並離開 Vim 編輯器後，它會開始進行 Rebase，而在 Squash 的過程中，它還會跳出 Vim 編輯器讓你編輯一下訊息：</p>\\n<p><img src=\\\"https://gitbook.tw/images/rewrite-history/merge-multiple-commits-to-one-commit/squash1.png\\\"></p>\\n<p>我把訊息改成「add all cats」：</p>\\n<p><img src=\\\"https://gitbook.tw/images/rewrite-history/merge-multiple-commits-to-one-commit/squash2.png\\\"></p>\\n<p>同樣的，在另一次的 Squash 也會再編輯一次 Commit 訊息，我把它改成「add all dogs」。整個 Rebase 的訊息如下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">$ git rebase -i bb0c9c2\\n[detached HEAD fb79104] add all cats\\n Date: Sun Aug 20 05:08:25 2017 +0800\\n 4 files changed, 0 insertions(+), 0 deletions(-)\\n create mode 100644 cat1.html\\n create mode 100644 cat2.html\\n create mode 100644 cat3.html\\n create mode 100644 cat4.html\\n[detached HEAD 803eeac] add all dogs\\n Date: Sun Aug 20 05:09:53 2017 +0800\\n 2 files changed, 0 insertions(+), 0 deletions(-)\\n create mode 100644 dog1.html\\n create mode 100644 dog2.html\\nSuccessfully rebased and updated refs/heads/master.</code></pre>\\n      </div>\\n<p>這時候的歷史紀錄就變成這樣了：</p>\\n<p><img src=\\\"https://gitbook.tw/images/rewrite-history/merge-multiple-commits-to-one-commit/squash3.png\\\"></p>\\n<p>這樣就把剛剛那些貓貓狗狗的，全部整理成兩個 Commit 了。</p>\",\"frontmatter\":{\"layout\":\"post\",\"title\":\"Markdown\",\"path\":\"/git-special-skill/\",\"categories\":[\"Markdown\",\"Movable Type\"],\"date\":\"2018/05/13\"}}},{\"post\":{\"html\":\"<h1>An h1 header</h1>\\n<p>Paragraphs are separated by a blank line.</p>\\n<p>2nd paragraph. <em>Italic</em>, <strong>bold</strong>, and <code class=\\\"language-text\\\">monospace</code>. Itemized lists\\nlook like:</p>\\n<ul>\\n<li>this one</li>\\n<li>that one</li>\\n<li>the other one</li>\\n</ul>\\n<!--more-->\\n<h2>An h2 header</h2>\\n<p>content starts at 4-columns in.</p>\\n<blockquote>\\n<p>Block quotes are\\nwritten like so.</p>\\n<p>They can span multiple paragraphs,\\nif you like.</p>\\n</blockquote>\\n<p>Use 3 dashes for an em-dash. Use 2 dashes for ranges (ex., “it’s all\\nin chapters 12—14”). Three dots … will be converted to an ellipsis.\\nUnicode is supported. ☺</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// javascript</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Hello World!!\\\"</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\",\"frontmatter\":{\"layout\":\"post\",\"title\":\"Markdown Example\",\"path\":\"/markdown-example/\",\"categories\":[\"Markdown\"],\"date\":\"2018/05/12\"}}}]}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/index.json\n// module id = 365\n// module chunks = 142629428675168"],"sourceRoot":""}