<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Code == Article]]></title>
  <link href="http://sihengwang.github.io/atom.xml" rel="self"/>
  <link href="http://sihengwang.github.io"/>
  <updated>2013-07-25T17:57:35.422Z</updated>
  <id>http://sihengwang.github.io/</id>
  <author>
    <name><![CDATA[ccWulang]]></name>
  </author>
  <generator uri="http://zespia.tw/hexo">Hexo</generator>
  <entry>
    <title type="html"><![CDATA[HTTP几个基本操作的简单介绍]]></title>
    <link href="http://sihengwang.github.io/2013/07/26/http-basic-operation/"/>
    <id>http://sihengwang.github.io/2013/07/26/http-basic-operation/</id>
    <published>2013-07-25T17:27:04.000Z</published>
    <updated>2013-07-25T17:57:29.000Z</updated>
    <content type="html"><![CDATA[<p>超文本传输协议（HTTP）定义了几个基本操作<code>GET 、POST 、PUT 、PATCH 、DELETE</code>。<br>这几个基本操作表现了客户端（如浏览器）与服务器（如Web服务器）之间的操作。<br><a name="more"></a>  </p>
<h4>GET</h4>
<p>GET 是最基本的HTTP操作，主要功能是用来向服务器发出请求，读取需要的数据，如读取一个网页或者读取一个表单数据等。当在浏览器上输入网址进行访问时，浏览器通常发出的就是GET请求。  </p>
<h4>POST</h4>
<p>POST 是另外一种最基本的操作，当我们提交一个表单的数据时，浏览器通常发送的就是POST请求。此外，POST也会用在创建和更新某些东西的操作上。比如：更改密码或者添加一个新状态等。  </p>
<h4>PUT 和 PATCH</h4>
<p>PUT 可以用在新增操作上，比较正确的定义是：Replace ( Create or Update )，当我们向服务器提交一个PUT请求时，如果服务器上已经存在要提交的东西时，服务器会进行替换，如果没有则新增。但是PUT需要包含完整的数据。<br>PATCH 操作相对比较新，与PUT的作用一样，也是用在新增操作上。Github API 和 Rails 4 都已经开始采用了。与PUT操作不同的是，PATCH操作不需要提交完整的数据，可以提交部分数据进行更新。  </p>
<h4>DELETE</h4>
<p>DELETE 用来销毁服务器上的某个东西。<br>DELETE操作和PATCH操作通常比其他操作使用少一些，因为浏览器没有内建对这两种请求的支持，不过现在很多Web框架已经可以很好的进行处理了。<br>未完待续...</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Yeoman进阶-在Yeoman中使用PHP]]></title>
    <link href="http://sihengwang.github.io/2013/06/26/yeoman-with-php/"/>
    <id>http://sihengwang.github.io/2013/06/26/yeoman-with-php/</id>
    <published>2013-06-25T18:11:43.000Z</published>
    <updated>2013-07-20T18:05:56.000Z</updated>
    <content type="html"><![CDATA[<p>上篇文章中，向大家介绍了Yeoman的基本使用。我在做一些个人项目中发现，在做PHP项目开发中，配合Yeoman一起使用，使得开发工作更有意思，配合live reloding，可以让我们在开发中更加有效率。<br>整合PHP与Yeoman，参考其他开发者的<a href="https://coderwall.com/p/bal2_a">文章</a>后，发现需要使用一个叫做gateway的中间件，但是由于我自己在使用过程中，尝试很多次，都未能很好的实现url重定向。因此又跑到<em><a href="https://npmjs.org">npm</a></em>上转了一圈发现另外一个中间件<a href="https://npmjs.org/package/gateway-rewrite">gateway-rewrite</a>，其功能与gateway类似，但在使用中能够成功实现url重定向。  </p>
<p><img src="/images/yeoman-logo.png" alt="Yeoman-logo"> <img src="/images/php-logo.gif" alt="PHP-logo"></p>
<p><a name="more"></a></p>
<h2>准备工作</h2>
<p>要整个Yeoman和PHP，我们需要安装php-cgi，并在Yeoman项目中添加<a href="https://npmjs.org/package/gateway-rewrite">gateway-rewrite</a>模块。<br>1.php-cgi<br>在OS X中安装，使用Homebrew(其他操作系统，请大家自行Google)  </p>
<figure class="highlight lang-shell"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="variable">$ </span>brew tap homebrew/dupes  
<span class="variable">$ </span>brew tap josegonzalez/homebrew-php  
<span class="variable">$ </span>brew install php54
</pre></td></tr></table></figure>
2.gateway-rewrite<br>进入Yeoman项目目录下，安装<a href="https://npmjs.org/package/gateway-rewrite">gateway-rewrite</a><br><figure class="highlight lang-shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="variable">$ </span>npm install gateway-rewrite
</pre></td></tr></table></figure>

<h2>修改项目配置</h2>
<p>修改Gruntfile.js<br>在Gruntfile.js顶部增加:  </p>
<figure class="highlight lang-js"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="keyword">var</span> gateway_rw = require(<span class="string">'gateway-rewrite'</span>);
<span class="keyword">var</span> rwGateway = <span class="function"><span class="keyword">function</span> <span class="params">(dir)</span>{</span>
    <span class="keyword">return</span> gateway_rw(require(<span class="string">'path'</span>).resolve(dir), {
        rules: [
            {
                rule: <span class="string">'^/contact/$'</span>,
                cgi:  <span class="string">'/usr/local/bin/php-cgi'</span>,
                to:   <span class="string">'/contact/index.php'</span>
            },
            <span class="comment">/* Use the following options to match the base path. */</span>
            {
                rule: <span class="string">'^/$'</span>,
                cgi:  <span class="string">'/usr/local/bin/php-cgi'</span>,
                to:   <span class="string">'/index.php'</span>
            }
        ]}
    );
};
</pre></td></tr></table></figure>

<p>其中rules当中，是用来订制规则的，大家根据需求进行改写。<br>在Gruntfile.js中的grunt.init函数下找到 connect.livereload.options.middleware，增加代码，修改后为:  </p>
<p><figure class="highlight lang-js"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>livereload: {
	options: {
		middleware: <span class="function"><span class="keyword">function</span> <span class="params">(connect)</span> {</span>
			<span class="keyword">return</span> [
				rwGateway(<span class="string">'app'</span>),
				lrSnippet,
				mountFolder(connect, <span class="string">'.tmp'</span>),
				mountFolder(connect, yeomanConfig.app)
			];
		}
	}
}
</pre></td></tr></table></figure>
找到 watch.livereload.files，增加代码，修改后为:  </p>
<p><figure class="highlight lang-js"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>livereload: {
	options: {
		livereload: LIVERELOAD_PORT
	},
	files: [
		<span class="string">'&lt;%= yeoman.app %&gt;/*.html'</span>,
		<span class="string">'&lt;%= yeoman.app %&gt;/{,*/}*.php'</span>,
		<span class="string">'{.tmp,&lt;%= yeoman.app %&gt;}/styles/{,*/}*.css'</span>,
		<span class="string">'{.tmp,&lt;%= yeoman.app %&gt;}/scripts/{,*/}*.js'</span>,
		<span class="string">'&lt;%= yeoman.app %&gt;/images/{,*/}*.{png,jpg,jpeg,gif,webp,svg}'</span>
	]
}
</pre></td></tr></table></figure>
之后修改app/index.html为app/index.php，启动服务，我们应该就能看到PHP程序正常运行了。<br>之后大家就可以畅通无阻的使用Yeoman+PHP开发程序啦。下一篇将为大家介绍Yeoman中livereload的使用。</p>
]]></content>
    <category scheme="http://sihengwang.github.io/tags/前端工具/" term="前端工具"/>
    <category scheme="http://sihengwang.github.io/tags/PHP/" term="PHP"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Yeomen介绍和环境搭建]]></title>
    <link href="http://sihengwang.github.io/2013/06/16/yeoman-started/"/>
    <id>http://sihengwang.github.io/2013/06/16/yeoman-started/</id>
    <published>2013-06-16T14:29:21.000Z</published>
    <updated>2013-07-20T18:08:38.000Z</updated>
    <content type="html"><![CDATA[<h2>Yeoman是什么东东？</h2>
<p>如果你已经厌倦了每一个新的项目开始时，在规划好前端所需要的各种各样的生产环境（如基于php或Node.js）、编译环境（如支持coffeescript/sass/less等的环境）、框架（如bootstrap/foundation/Yui）、类库、测试环境搭建以及打包部署等，然后在本地一个一个将上述所需的各种东东或是加入到你的工程当中或是在本地搭建好环境。想象一下，这是多么庞大的一个工作啊，它会无情的消耗掉我们宝贵的开发时间。而Yeoman就是为我们解决这些烦心事的，它让我们能够通过几条命令，花费很短的时间就能够快速准备好这一切。我们就可以全心全意的投入在Coding的美妙世界当中。</p>
<p>那么到底什么是Yeoman呢？其实Yeoman是三个工具的组合。它不单单是一个工具，它是一个工作流程，是使得Web开发当中各个环节和部件更加协调运作的一种最佳实践。从而提高我们的生产力和满意度。</p>
<p><img src="/images/toolset.png" alt="Yeoman工具集"></p>
<a name="more"></a>

<p>三个工具的用途：</p>
<ul>
<li><p><em>Yo</em> : Yeoman的核心工具，项目框架和各种编译环境的生成配置工具，也可以通过此工具为自己打造属于自己的工程框架  </p>
</li>
<li><p><em>GRUNT</em> : 是一款非常著名的前端构建工具，jquery就是用它打包的。同时还可以帮我我们在开发过程中预览和测试项目  </p>
</li>
<li><p><em>BOWER</em> : Web开发当中的项目依赖组件管理器，它与前端开发相关的组件关系，就好比npm与node.js的关系。有了它，你再也不用手动下载并管理依赖文件和脚本了  </p>
</li>
</ul>
<p><img src="/images/workflow.jpg" alt="Yeoman工作流程"></p>
<h2>Yeoman安装</h2>
<p>首选确保电脑上已经安装了<a href="http://nodejs.org/">Node.js</a>和<a href="http://git-scm.org/">Git</a>，如果还没有安装，请参照各自的官网进行安装：  </p>
<p>然后打开终端，输入：  </p>
<figure class="highlight lang-shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">npm</span> install -g yo grunt-cli bower
</pre></td></tr></table></figure>


<p>这里请注意，如果安装失败，本人碰到两个问题：1.网络原因，也许是被墙了；2.权限原因，某些文件夹不具有访问权限<br>安装成功后，可以通过以下命令检测安装的成功  </p>
<figure class="highlight lang-shell"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="comment">yo</span> <span class="literal">-</span><span class="comment">v</span>
<span class="comment">grunt</span> <span class="literal">-</span><span class="comment">v</span>
<span class="comment">bower</span> <span class="literal">-</span><span class="comment">v
</pre></td></tr></table></figure>

<p>我们可以通过以下命令检查我们已经安装了的框架，并获取框架部署使用的帮助信息  </p>
<figure class="highlight lang-shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">yo</span> -h
</pre></td></tr></table></figure>

<p>终端中会输出类似这样的信息  </p>
<figure class="highlight lang-shell"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre>See a <span class="type">list</span> <span class="keyword">of</span> available generators <span class="keyword">with</span> npm search yeoman-generator
Install generators <span class="keyword">with</span> npm install &lt;generator-<span class="property">name</span>&gt;

Usage: yo GENERATOR [args] [options]

General options:
  -h, <span class="comment">--help     # Print generator's options and usage</span>
  -f, <span class="comment">--force    # Overwrite files that already exist</span>

Please choose a generator <span class="keyword">below</span>.


Bootstrap
  bootstrap:app

Init
  init:
  init:app
  init:subgenerator

Mocha
  mocha:app
  mocha:generator

Webapp
  webapp:app
</pre></td></tr></table></figure>

<p>这里我们看到，&quot;Please choose a generator below.&quot;下面的内容，就是我们系统当中已经安装了的工程模板。其中app指的就是webapp的框架，另外两个的意思目前还没有掌握清楚，日后会为大家补充。
我们可以通过  </p>
<figure class="highlight lang-shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">npm</span> search yeoman-generator
</pre></td></tr></table></figure>


<p>搜索yeoman生成器的模板<br>比如通过搜索，我们看到有一个模板叫做: <em>generator-bootstrap</em><br>那么我们可以通过安装命令进行安装  </p>
<figure class="highlight lang-shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">npm</span> install -g generator-bootstrap
</pre></td></tr></table></figure>


<h2>第一个项目</h2>
<p>我们已经安装好了Yeoman，下来用它来完成我们的第一个工程项目的搭建和部署吧！<br>以使用 <em>angular</em> 框架为例：<br>1.安装基于 <em>angular</em> 框架模板（如果我们系统当中已经存在则跳过）  </p>
<figure class="highlight lang-shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">npm</span> install -g generator-angular
</pre></td></tr></table></figure>

<p>  安装过程中，Yeoman会很人性化的提示我们是否需要引入bootstrap框架以及sass编译环境等相关的组件是否引入到工程项目当中，我们可以根据自己的需要选择</p>
<p><img src="/images/angular-install.png" alt="安装完成后的提示"></p>
<p>2.生成基于 <em>angular</em> 工程项目框架（在需要生成工程项目的文件夹下输入）  </p>
<figure class="highlight lang-shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">yo</span> angular
</pre></td></tr></table></figure>

<p><img src="/images/angular-generated.png" alt="生成后的项目工程框架"></p>
<p>3.此时我们的工程项目已经生成完毕，假设此时我们的开发项目中需要使用 <em>angular-ui</em> ，那么我们可以通过 <em>BOWER</em> 直接将 <em>angular-ui</em> 拉近我们的项目中，无需做其他工作</p>
<figure class="highlight lang-shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">bower</span> install angular-ui
</pre></td></tr></table></figure>

<p>4.测试我们的app  </p>
<figure class="highlight lang-shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">grunt</span> test
</pre></td></tr></table></figure>

<p>5.预览我们的app  </p>
<figure class="highlight lang-shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">grunt</span> server
</pre></td></tr></table></figure>

<p>6.生成我们的app（build可省略）  </p>
<figure class="highlight lang-shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">grunt</span> build
</pre></td></tr></table></figure>

<p>接下来就可以享受Coding啦!!!</p>
]]></content>
    <category scheme="http://sihengwang.github.io/tags/前端工具/" term="前端工具"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://sihengwang.github.io/2013/06/13/hello-world/"/>
    <id>http://sihengwang.github.io/2013/06/13/hello-world/</id>
    <published>2013-06-12T16:49:12.000Z</published>
    <updated>2013-06-12T16:49:12.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://zespia.tw/hexo">Hexo</a>! This is your very first post. Check <a href="http://zespia.tw/hexo/docs">documentation</a> to learn how to use.</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Markdown博客]]></title>
    <link href="http://sihengwang.github.io/2013/05/02/firstBlog/"/>
    <id>http://sihengwang.github.io/2013/05/02/firstBlog/</id>
    <published>2013-05-02T15:40:00.000Z</published>
    <updated>2013-07-20T18:12:14.000Z</updated>
    <content type="html"><![CDATA[<p>第一篇MarkDown博客，使用学习MarkDown基本语法。   </p>
<p>@插入两个以上的空格然后回车，即表示 &lt; /br&gt;   </p>
<p>这是一个普通段落:</p>
<pre><code><figure class="highlight"><pre>这是一个代码区块
Here <span class="keyword">is</span> an example <span class="keyword">of</span> <span class="constant">AppleScript</span>:

    <span class="keyword">tell</span> <span class="type">application</span> <span class="string">"Foo"</span>
        <span class="command">beep</span>
    <span class="keyword">end</span> <span class="keyword">tell</span>
</pre></figure></code></pre>
<div class="footer">
    &copy; 2013 ccWulang Corporation
</div>   


<a name="more"></a>  


<h1>表格:</h1>
<table>
<thead>
<tr>
<th>First Header</th>
<th>Second Header</th>
<th>Third Header</th>
</tr>
</thead>
<tbody>
<tr>
<td>Content Cell</td>
<td>Content Cell</td>
<td>Content Cell</td>
</tr>
</tbody>
</table>
<h1>图片:</h1>
<p><img src="Mou_128.png" alt="lenin&#39;s photo" title="aaaa的照片"></p>
<h1>自动链接:</h1>
<p><a href="http://example.com">http://example.com</a></p>
<hr>
<hr>
<hr>
<hr>
<h2>- - -</h2>
<p>This is <a href="http://example.com/" title="Title">an example</a> inline link.
<a href="http://example.com">This link</a> has no title attribute.<br>See my <a href="/about/">About</a> page for details.<br>This is <a href="http://example.com/">an example</a> reference-style link.   </p>
<pre><code><figure class="highlight"><pre>  "Optional Title Here"   
</pre></figure></code></pre>
<p><a href="http://google.com/" title="google">Google</a></p>
<p>I get 10 times more traffic from <a href="http://google.com/" title="Google">Google</a> than from <a href="http://search.yahoo.com/" title="Yahoo Search">Yahoo</a> or <a href="http://search.msn.com/" title="MSN Search">MSN</a>.</p>
<p>I get 10 times more traffic from <a href="http://google.com/" title="google">Google</a> than from <a href="http://search.yahoo.com/" title="Yahoo">Yahoo</a> or <a href="http://search.msn.com/" title="MSN">MSN</a>.</p>
<h1>强调:</h1>
<p><em>single asterisks</em></p>
<p><em>single asterisks</em></p>
<p><strong>double asterisks</strong></p>
<p><strong>double asterisks</strong></p>
<p>un<em>frigging</em>belevable</p>
<h1>代码:</h1>
<p>Use the <code>printf()</code> function</p>
<p><code>There is a literal backtick (`) here.</code></p>
<p>A single backtick in a code span: <code>` </code></p>
<p>A backtick-delimited string in a code span: <code>`foo` </code></p>
<p>Please don&#39;t use any <code>&lt;blank&gt;</code> tags.</p>
<p><code>&amp;#8212;</code> is the decimal-encoded equivalent of <code>&amp;mdash;</code>.</p>
<figure class="highlight lang-js"><figcaption><span>Javascript Hello World </span></figcaption><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>    alert(<span class="string">'hello world'</span>);
</pre></td></tr></table></figure>
<figure class="highlight lang-cpp"><figcaption><span>C Plus Hello World</span></figcaption><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>    <span class="keyword">void</span> main() {
        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello World"</span> &lt;&lt; endl;
    }
</pre></td></tr></table></figure>
<figure class="highlight lang-csharp"><figcaption><span>C Sharp Hello World</span></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>    <span class="class"><span class="keyword">namespace</span> <span class="title">Test</span> {</span>
        <span class="class"><span class="keyword">class</span> <span class="title">TestClass</span> {</span>
            <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) {
                Console.WriteLine(<span class="string">"Hello World"</span>);
            }
        }
    }
</pre></td></tr></table></figure>
<figure class="highlight lang-js"><figcaption><span>function</span></figcaption><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span> {</span>
}
</pre></td></tr></table></figure>
注释：.. <figure class="highlight"><figcaption><span>test</span> <a href="/downloads/code/javascript/test.js">download</a></figcaption><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="comment">/**
sample javascript from xui
*/</span>

<span class="keyword">var</span> <span class="literal">undefined</span>,
    xui,
    window     = <span class="keyword">this</span>,
    string     = <span class="keyword">new</span> String(<span class="string">'string'</span>),
    document   = window.document,
    simpleExpr = <span class="regexp">/^#?([\w-]+)$/</span>,
    idExpr     = <span class="regexp">/^#/</span>,
    tagExpr    = <span class="regexp">/&lt;([\w:]+)/</span>,
    slice      = <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> {</span> <span class="keyword">return</span> [].slice.call(e, <span class="number">0</span>); };
    <span class="keyword">try</span> { <span class="keyword">var</span> a = slice(document.documentElement.childNodes)[<span class="number">0</span>].nodeType; }
    <span class="keyword">catch</span>(e){ slice = <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> {</span> <span class="keyword">var</span> ret=[]; <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; e[i]; i++)
        ret.push(e[i]); <span class="keyword">return</span> ret; }; }

window.x$ = window.xui = xui = <span class="keyword">function</span>(q, context) {
    <span class="keyword">return</span> <span class="keyword">new</span> xui.fn.find(q, context);
};
</pre></td></tr></table></figure>


<h1>这是 H1</h1>
<h2>这是 H2</h2>
<h3>这是 H3</h3>
<h4>这是 H4</h4>
<h5>这是 H5</h5>
<h6>这是 H6</h6>
<blockquote>
<p>This is a blockqutoe with tow pargraphs.</p>
<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</p>
<blockquote>
<p>This is nested blockquote.</p>
</blockquote>
<p>Back to the first level.</p>
<h2>这是一个标题.</h2>
<ol>
<li>这是第一行列表项</li>
<li>这是第二行列表项</li>
</ol>
<p>给出一些例子:</p>
<p>  return shell_exec(&quot;echo $input | $markdown_script&quot;);</p>
</blockquote>
<ul>
<li>Red</li>
<li>Green</li>
<li><p>Blue</p>
</li>
<li><p>Red</p>
</li>
<li>Green</li>
<li><p>Blue</p>
</li>
<li><p>Red</p>
</li>
<li>Green</li>
<li><p>Blue</p>
</li>
<li><p>Bird</p>
</li>
<li><p>McHale</p>
</li>
<li><p>Lorem ipsum dolor sit amet, consectetuer    adipiscing elit.    Aliquam hendrerit mi    posuere lectus. Vestibulum enim wisi,       viverra nec, fringilla in, laoreet      vitae, risus.</p>
</li>
<li><p>Donec sit amet nisl. Aliquam semper         ipsum sit amet velit.    Suspendisse id     sem consectetuer libero luctus              adipiscing.</p>
<blockquote>
<p>This is a blockquote
inside a list item</p>
</blockquote>
</li>
<li><p>Bird</p>
</li>
<li><p>Magic</p>
</li>
</ul>
]]></content>
  </entry>
</feed>
